#include <QFile>
#include <QSplitter>
#include <QWidget>
#include <QKeyEvent>
#include <QShortcut>
#include <QKeySequence>
#include <QMessageBox>
#include <QSqlQueryModel>
#include <QSortFilterProxyModel>
#include <QAbstractProxyModel>
#include <QSqlQuery>
#include <QSqlRecord>
#include <QPaintDevice>
#include <QObject>
#include <QSqlRecord>
#include <QDate>

#include "ui_mainwindow.h"
#include "taskconfig/about.h"
#include "taskconfig/taskconfig.h"
#include "tsziinifile.h"
#include "mainwindow.h"
#include "p_sgapred.h"
#include "edittemplate.h"
#include "setwindow.h"
#include "moduleconst.h"
#include "modulevar.h"
#include "newts.h"
#include "find.h"


//-------------------------------------------------------------------------------------------------

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    // Запускаем наш поток, в котором играем тревожный звук
    thread.start();


     // Вводим комбинации горячих клавиш для данной формы
    // Затем связываем эти шоткаты сигналами со слотами
                                                         /*
    Новая запись          Ctrl+N
    Редактировать запись  Ctrl+E
    Удалить запись        Ctrl+X
    Открыть НСИ           Ctrl+D
    Открыть настройки     Ctrl+S
    Открыть строку поиска Ctrl+F
    Вызвать помощь        Ctrl+H (а также F1, к-рый отлавливается через KeyEvent)
    Закрыть форму         Ctrl+Q   */

    QShortcut *exitShortcut = new QShortcut(QKeySequence("Ctrl+Q"),this,0);
    QShortcut *addShortcut  = new QShortcut(QKeySequence("Ctrl+N"),this,0);
    QShortcut *editShortcut = new QShortcut(QKeySequence("Ctrl+E"),this,0);
    QShortcut *delShortcut  = new QShortcut(QKeySequence("Ctrl+X"),this,0);
    QShortcut *sprShortcut  = new QShortcut(QKeySequence("Ctrl+D"),this,0);
    QShortcut *findShortcut = new QShortcut(QKeySequence("Ctrl+F"),this,0);
    QShortcut *setShortcut  = new QShortcut(QKeySequence("Ctrl+S"),this,0);
    QShortcut *hlpShortcut  = new QShortcut(QKeySequence("Ctrl+H"),this,0);

     // Соединяем сигналы и слоты:
    // Нажатие шоткатов
    connect (exitShortcut, SIGNAL (activated()), this, SLOT (CloseWindowMain()));
    connect (addShortcut,  SIGNAL (activated()), this, SLOT (FormChoiceAdd()));
    connect (editShortcut, SIGNAL (activated()), this, SLOT (FormChoiceEdit()));
    connect (delShortcut,  SIGNAL (activated()), this, SLOT (DeleteRecord()));
    connect (sprShortcut,  SIGNAL (activated()), this, SLOT (CreateEditTemplate()));
    connect (findShortcut, SIGNAL (activated()), this, SLOT (ShortCutFindAction()));
    connect (setShortcut,  SIGNAL (activated()), this, SLOT (CreateSetWindow()));
    connect (hlpShortcut,  SIGNAL (activated()), this, SLOT (HelpAction()));

    // Выбор текущего типа ТС
    connect (ui->menuSelectSGA, SIGNAL (triggered()), this, SLOT (SelectSGA())); // Меню "Техническое средство\СГА" - Выбрать режим работы с СГА
    connect (ui->menuSelectGVS, SIGNAL (triggered()), this, SLOT (SelectGVS())); // Меню "Техническое средство\ЖВС" - Выбрать режим работы с ЖВС
    connect (ui->menuSelectNPA, SIGNAL (triggered()), this, SLOT (SelectNPA())); // Меню "Техническое средство\НПА" - Выбрать режим работы с НПА
    connect (ui->menuCreateSetWindow, SIGNAL (triggered()), this, SLOT (CreateSetWindow()));  // Меню "Настройки\Цветовые настройки" - Открыть форму настроек цветов
    connect (ui->menuCloseWindowMain, SIGNAL (triggered()), this, SLOT (CloseWindowMain())); // Меню 'Выход'
    connect (ui->menuSpravMain, SIGNAL (triggered()), this, SLOT (HelpAction()));           // Меню Открыть форму "О Программе"
    connect (ui->menuSpravContent, SIGNAL (triggered()), this, SLOT (HelpAction()));       // Меню Открыть форму "О Программе"
    connect (ui->menuCreateWinAbout, SIGNAL (triggered()), this, SLOT (CreateWinAbout()));// Меню Открыть форму "О Программе"

    connect (ui->tabWidget, SIGNAL(currentChanged(int)), this, SLOT (ChangeCurrentPage(int)));     // смена страницы ТабВыджета

    connect (ui->menuNSISGA_5,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate5()));   // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSISGA_6,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate6()));   // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSISGA_7,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate7()));   // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_8,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate8()));   // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_9,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate9()));   // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_10, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate10()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_11, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate11()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_12, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate12()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSIGVS_13, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate13()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSINPA_14, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate14()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню
    connect (ui->menuNSINPA_15, SIGNAL (triggered ()), this, SLOT (CreateEditTemplate15()));  // Вызов окна "Редактирование НСИ" из соответствующего пункта меню


     // Рисуем в тулбаре кнопки сиконками---
    // Добавить
    QIcon newIcon;
    newIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/new.png"), QSize(), QIcon::Normal, QIcon::Off);
    actNewRecord = new QAction (newIcon, tr("Новая запись\nCtrl+N"), this);
    // Изменить
    QIcon editIcon;
    editIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/edit.png"), QSize(), QIcon::Normal, QIcon::Off);
    actEditRecord = new QAction (editIcon, tr("Редактировать запись\nCtrl+E"), this);
    // Удалить
    QIcon delIcon;
    delIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/delete.png"), QSize(), QIcon::Normal, QIcon::Off);
    actDelRecord = new QAction (delIcon, tr("Удалить запись\nCtrl+X"), this);
    // Поиск
    QIcon find;
    find.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/find.png"), QSize(), QIcon::Normal, QIcon::Off);
    actFindAction = new QAction (find, tr("Поиск\nCtrl+F"), this);
    //Ставим кнопу зажимаемой
    actFindAction->setCheckable(true);
    // НСИ
    QIcon nsiIcon;
    nsiIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/directory.png"), QSize(), QIcon::Normal, QIcon::Off);
    actNSIAction = new QAction (nsiIcon, tr("Редактирование НСИ\nCtrl+D"), this);
    // Кнопка 'Настройки'
    QIcon setupIcon;
    setupIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/setup.png"), QSize(), QIcon::Normal, QIcon::Off);
    actSetupAction = new QAction (setupIcon, tr("Настройки программы\nCtrl+S"), this);
    // Кнопка 'Справка'
    QIcon helpIcon;
    helpIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/helpindx.png"), QSize(), QIcon::Normal, QIcon::Off);
    actHelpAction = new QAction (helpIcon, tr("Система помощи\nCtrl+H"), this);
    // Выход
    QIcon exitIcon;
    exitIcon.addFile(QString::fromUtf8(":/new/buttonpictures/src/icons/exit.png"), QSize(), QIcon::Normal, QIcon::Off);
    actExitAction = new QAction (exitIcon, tr("Завершить работу\nCtrl+Q"), this);

    // привязываем к тулбару экшонсы
    ui->toolBar->addAction(actNewRecord);
    ui->toolBar->addAction(actEditRecord);
    ui->toolBar->addAction(actDelRecord);
    // разделитель после кнопок /ДобавитьИзменитьУдалить/
    ui->toolBar->addSeparator();
    ui->toolBar->addAction(actFindAction);
    // Вставляем сепаратор, ещё
    ui->toolBar->addSeparator();
    ui->toolBar->addAction(actNSIAction);
    ui->toolBar->addAction(actSetupAction);
    ui->toolBar->addAction(actHelpAction);
    // И ещё один перед выходом
    ui->toolBar->addSeparator();
    ui->toolBar->addAction(actExitAction);

    // Соединим экшонсы сигналами со слотами
    connect (actNewRecord,  SIGNAL (triggered ()), this, SLOT (FormChoiceAdd()));         // Экшонс на кнопку/меню "Добавить"
    connect (actEditRecord, SIGNAL (triggered ()), this, SLOT (FormChoiceEdit()));       // Экшонс на кнопку/меню "Редактировать"
    connect (actDelRecord,  SIGNAL (triggered ()), this, SLOT (DeleteRecord()));        // Экшонс на кнопку/меню "Удалить"
    connect (actNSIAction,  SIGNAL (triggered ()), this, SLOT (CreateEditTemplate())); // Экшонс на кнопку/меню "Редактирование НСИ"
    connect (actSetupAction,SIGNAL (triggered ()), this, SLOT (CreateSetWindow()));   // Экшонс на кнопку/меню "Настройки программы"
    connect (actHelpAction, SIGNAL (triggered ()), this, SLOT (HelpAction()));       // Экшонс на кнопку/меню "Система помощи"
    connect (actFindAction, SIGNAL (triggered ()), this, SLOT (FindAction()));       // Экшонс на кнопку/меню "Система помощи"
    connect (actExitAction, SIGNAL (triggered ()), this, SLOT (CloseWindowMain())); // Экшонс на кнопку/меню "Закрыть окно"

    // Грузим установки формы из конфигурационного файла
    qTC->formLoad(this, FormSetFile, true);

    // Отредактируем необходимые наименования пунктов меню
    QString MenuCaption;
    // Подменю "Техническое средство"

    MenuCaption = tr("Ведение информации о состоянии ").append(getTSSGA());
    ui->menuSelectSGA->setText(MenuCaption);
    MenuCaption = tr("Ведение информации о состоянии ").append(getTSGVS());
    ui->menuSelectGVS->setText(MenuCaption);
    MenuCaption = tr("Ведение информации о состоянии ").append(getTSNPA());
    ui->menuSelectNPA->setText(MenuCaption);

    //Подменю "НСИ по учету состояний ТС"
    MenuCaption = tr("НСИ по учету состояний ").append(getTSSGA());
    ui->menuNSISGA->setTitle(MenuCaption);
    MenuCaption = tr("НСИ по учету состояний ").append(getTSGVS());
    ui->menuNSIGVS->setTitle(MenuCaption);
    MenuCaption = tr("НСИ по учету состояний ").append(getTSNPA());
    ui->menuNSINPA->setTitle(MenuCaption);

    //Подменю "НСИ по учету состояний tsSGA"
    ui->menuNSISGA_5->setText(blankPredSGA.toLatin1());
    ui->menuNSISGA_6->setText(blankRabSGA.toLatin1());
    ui->menuNSISGA_7->setText(blankPosleSGA.toLatin1());

    //Подменю "НСИ по учету состояний tsGVS"
    ui->menuNSIGVS_8->setText(blankPredGVS.toLatin1());
    ui->menuNSIGVS_9->setText(blankPredBDD.toLatin1());
    ui->menuNSIGVS_10->setText(blankPosleGVS.toLatin1());
    ui->menuNSIGVS_11->setText(blankPosleBDD.toLatin1());
    ui->menuNSIGVS_12->setText(blankParamSGO.toLatin1());
    ui->menuNSIGVS_13->setText(blankSpuskGVS.toLatin1());

    //Подменю "НСИ по учету состояний tsNPA"
    ui->menuNSINPA_14->setText(blankPredNPA.toLatin1());
    ui->menuNSINPA_15->setText(blankPosleNPA.toLatin1());


     // Текущая вкладка ТабВыджета - 1ая,
    // следовательно, скрываем список погружений
    ChangeCurrentPage(0);
    ui->tabWidget->setCurrentIndex(0);

    // Ставим курсор в таблице Списка и Местоположения ТС на 1ю запись
    ui->tblSpisPlaceTS->setFocus(Qt::ActiveWindowFocusReason);
    ui->tblSpisPlaceTS->selectRow(0);

    //---- Текущее ТС, с которым работаем запишем в заголовочек (временный кусок кода)
    QString var_label_NameTS = "Текущий ";
    // Наименование закладки Таба
    QString tmpString;
    tmpString = "Состояние и положение: ";


    // Выбран tsSGA
    if (ui->menuSelectSGA->isChecked())
    {

        // запомним текущий тип ТС
        setCurrentTS(getTSSGA(), getTSSGAid(), "Штука СГА", 23, 325); // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова
        var_label_NameTS = var_label_NameTS.append(getTSSGA()).append(": ");
        // Заголовок 1ой закладки обновим
        tmpString.append(getTSSGA());
        ui->tabWidget->setTabText(0,tmpString);


        // Отображаем необходимые закладки (Предспусковая/спуск/послеспусковая)
/* ещё пока не научился */

    }
    // Выбран tsGVS
    else if (ui->menuSelectGVS->isChecked())
    {

       // запомним текущий тип ТС
       setCurrentTS(getTSGVS(), getTSGVSid(), "Штука ЖВС", 23, 325); // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова

       var_label_NameTS = var_label_NameTS.append(getTSGVS()).append(": ");
       // Заголовок 1ой закладки обновим
       tmpString.append(getTSGVS());
       ui->tabWidget->setTabText(0,tmpString);

       // Отображаем необходимые закладки (Предспусковая ЖВС/Предспусковая БДД/спуск ЖВС/послеспусковая ЖВС/Послеспусковая БДД/Показания СЖО)
/* ещё пока не научился */

   }
    // Выбран tsNPA
    else if (ui->menuSelectNPA->isChecked())
    {
       // запомним текущий тип ТС
       setCurrentTS(getTSNPA(), getTSNPAid(), "Штука НПА", 23, 325); // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова

       var_label_NameTS = var_label_NameTS.append(getTSNPA()).append(": ");
       // Заголовок 1ой закладки обновим
       tmpString.append(getTSNPA());
       ui->tabWidget->setTabText(0,tmpString);

       // Отображаем необходимые закладки (Предспусковая/послеспусковая)
/* ещё пока не научился */

   }

    else  // Если по какой-то причине ничего не выбрано, то это глюк - закрываемся
    {
       this->close();
    }

    ui->label_NameTS->setText(var_label_NameTS);


    // Подключаем пока что /разработка/ произвольные таблички для показа
    ui->tblSpisPogruzh->setSortingEnabled(true);
    ui->tblSpisPlaceTS->setSortingEnabled(true);

    QuerySpisPlaceTS = new QSqlQuery (getDbName());
    QuerySpisPogruzh = new QSqlQuery (getDbName());

    ModelSpisPlaceTS = new QSqlQueryModel(this);
    ModelSpisPogruzh = new QSqlQueryModel(this);

    ProxyModelSpisPlaceTS = new QSortFilterProxyModel(this);
    ProxyModelSpisPogruzh = new QSortFilterProxyModel(this);

    ProxyModelSpisPlaceTS->setSourceModel(ModelSpisPlaceTS);
    ProxyModelSpisPogruzh->setSourceModel(ModelSpisPogruzh);

    ui->tblSpisPlaceTS->setModel(ModelSpisPlaceTS);
    ui->tblSpisPogruzh->setModel(ProxyModelSpisPogruzh);


    //  приведены 3 способа запросов с параметрами
    // 1 - запрос с параметром
    //Query->prepare("select * from ntd.potrebnd where year_num = ?");
    QuerySpisPlaceTS->prepare("select orgrazr, num_doc, vid_doc from ntd.activnd");
    QuerySpisPlaceTS->exec();

    QuerySpisPogruzh->prepare("select numoakt, dateoakt from ntd.otmennd");
    QuerySpisPogruzh->exec();

    // в этом случае, чтобы увидеть результаты, необходимо присвоить модели запрос ПОСЛЕ выполнения запроса
    ModelSpisPlaceTS->setQuery(*QuerySpisPlaceTS);
    ModelSpisPogruzh->setQuery(*QuerySpisPogruzh);

/*//////////////////////
    // 2й способ - запрос с аргументом через сетКваери
    Model->setQuery(QString ("select * from ntd.potrebnd where year_num = %1").arg(currYear), Main_DB());
    // 3й способ - запрос через экзек
    Query->exec(QString ("select * from ntd.potrebnd where year_num = %1").arg(currYear));
*//////////////////////////

    // грузим столбцы
    //if (!qTC->tableLoad(ui->tblSpisPogruzh, ModelSpisPogruzh))
   // {
        QStringList Title; Title<<tr("№ погружения")<<tr("Дата погружения");
           for (int i = 0; i < Title.count(); i++)
             ProxyModelSpisPogruzh->setHeaderData(i, Qt::Horizontal, Title.at(i));
           ui->tblSpisPogruzh->resizeColumnsToContents();
    //}
/*

           QStringList Title2; Title2<<tr("№ погружения")<<tr("Дата погружения");
              for (int i = 0; i < Title.count(); i++)
                ModelPredPogruzh->setHeaderData(i, Qt::Horizontal, Title2.at(i));
              ui->tblPredPogruzh->resizeColumnsToContents();
           
           // отдебажим запрос

    qDebug() << "Model query last error " << ModelSpisPogruzh->query().lastError();
    qDebug() << "Model query last error " << ModelPredPogruzh->query().lastError();
*/
    // Ставим изначально сортировку на 0-колонку
    ui->tblSpisPlaceTS->sortByColumn(0, Qt::AscendingOrder);
    ui->tblSpisPogruzh->sortByColumn(0, Qt::AscendingOrder);


}

//-------------------------------------------------------------------------------------------------

MainWindow::~MainWindow()
{
    // Сохраняем установки формы
    qTC->formSave(this,FormSetFile,true);
    delete ui;
}

//-------------------------------------------------------------------------------------------------

void MainWindow::keyPressEvent(QKeyEvent *event)
{
    switch (event->key())
    {
        case Qt::Key_F1:
            qTC->showMainHelp();
        break;
    }
}


//-------------------------------------------------------------------------------------------------

void MainWindow::CloseWindowMain()
{
    this->close();
}
//-------------------------------------------------------------------------------------------------

void MainWindow::CreateWinAbout()
{
    qTC->showAbout(tr("ОКР Растворение \n\"Ведение информации о состоянии технических средств, используемых при проведении спасательных работ\""), "1.0");
}
//-------------------------------------------------------------------------------------------------

void MainWindow::Create_p_sgapredForm()
{
    p_sgapredForm adw;
    adw.exec();

//    NewTSWindow nts;
//    nts.exec();

}

//-------------------------------------------------------------------------------------------------

  // В этот слот мы забредем в случае, если тупо нажали кнопку "Редактировать НСИ"
 // Будет вызвана форма редактирования настроенная на тот ТС, к-рый сейчас открыт

void MainWindow::CreateEditTemplate()
{

    switch (getCurrentTS().typeTSid)
    {
     case 1: CreateEditTemplate5();
     break;
     case 2: CreateEditTemplate8();
     break;
     case 3: CreateEditTemplate14();
     break;
     default: CreateEditTemplate5();
     break;
    }
}

//-------------------------------------------------------------------------------------------------

void MainWindow::CreateEditTemplate5()
{
    EditTemplate et(5);
    et.exec();
}

//-------------------------------------------------------------------------------------------------

void MainWindow::CreateEditTemplate6()
{
    EditTemplate et(6);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate7()
{
    EditTemplate et(7);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate8()
{
    EditTemplate et(8);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate9()
{
    EditTemplate et(9);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate10()
{
    EditTemplate et(10);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate11()
{
    EditTemplate et(11);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate12()
{
    EditTemplate et(12);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate13()
{
    EditTemplate et(13);
    et.exec();
}
//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate14()
{
    EditTemplate et(14);
    et.exec();
}

//-------------------------------------------------------------------------------------------------
void MainWindow::CreateEditTemplate15()
{
    EditTemplate et(15);
    et.exec();
}
//-------------------------------------------------------------------------------------------------

void MainWindow::CreateSetWindow()
{
    SetWindow sw;
    sw.exec();
}

//-------------------------------------------------------------------------------------------------

void MainWindow::SelectSGA()
{
    ui->menuSelectSGA->setChecked(true);
    ui->menuSelectGVS->setChecked(false);
    ui->menuSelectNPA->setChecked(false);

    // запомним текущий тип ТС
    setCurrentTS(getTSSGA(), getTSSGAid(), "Штука СГА", 23, 325); // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова

    // Обновим заголовочек текущего ТС
    QString var_label_NameTS = "Текущий ";
    var_label_NameTS = var_label_NameTS.append(getTSSGA()).append(": ");
    ui->label_NameTS->setText(var_label_NameTS);

    // Заголовок 1ой закладки обновим
    QString tmpString = "Состояние и положение ";
    tmpString.append(getTSSGA());
    ui->tabWidget->setTabText(0,tmpString);

    // Отображаем необходимые закладки (Предспусковая/спуск/послеспусковая)
/* ещё пока не научился */

}
//-------------------------------------------------------------------------------------------------

void MainWindow::SelectGVS()
{
    ui->menuSelectSGA->setChecked(false);
    ui->menuSelectGVS->setChecked(true);
    ui->menuSelectNPA->setChecked(false);

    // запомним текущий ТС
    setCurrentTS(getTSGVS(), getTSGVSid(), "Штука ЖВС", 23, 325);  // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова

    // Обновим заголовочек текущего ТС
    QString var_label_NameTS = "Текущий ";
    var_label_NameTS = var_label_NameTS.append(getTSGVS()).append(": ");
    ui->label_NameTS->setText(var_label_NameTS);

    // Заголовок 1ой закладки обновим
    QString tmpString = "Состояние и положение ";
    tmpString.append(getTSGVS());
    ui->tabWidget->setTabText(0,tmpString);

    // Отображаем необходимые закладки (Предспусковая/спуск/послеспусковая)
/* ещё пока не научился */

}
//-------------------------------------------------------------------------------------------------
void MainWindow::SelectNPA()
{
    ui->menuSelectSGA->setChecked(false);
    ui->menuSelectGVS->setChecked(false);
    ui->menuSelectNPA->setChecked(true);

    // запомним текущий тип ТС
    setCurrentTS(getTSNPA(), getTSNPAid(), "Штука НПА", 23, 325); // потом вместо "Штуки" значение возьмем из таблицы, когда она будет готова

    // Обновим заголовочек текущего ТС
    QString var_label_NameTS = "Текущий ";
    var_label_NameTS = var_label_NameTS.append(getTSNPA()).append(": ");
    ui->label_NameTS->setText(var_label_NameTS);

    // Заголовок 1ой закладки обновим
    QString tmpString = "Состояние и положение ";
    tmpString.append(getTSNPA());
    ui->tabWidget->setTabText(0,tmpString);

    // Отображаем необходимые закладки (Предспусковая/спуск/послеспусковая)
/* ещё пока не научился */

}
//-------------------------------------------------------------------------------------------------


void MainWindow::ChangeCurrentPage(int index)
{

     // если выбрана 1я вкладка ТабВыджета, то скрываем список погружений
    // если любая другая, то отображаем список
    if (index == 0)
    {
        ui->frame->setVisible(false);
        ui->tblSpisPlaceTS->setFocus(Qt::ActiveWindowFocusReason);
        ui->tblSpisPlaceTS->selectRow(0);

    }
    // если выбрана 2я вкладка ТабВыджета
    else if (index == 1)
    {
        ui->frame->setVisible(true);
        ui->tblSpisPogruzh->setFocus(Qt::ActiveWindowFocusReason);
        ui->tblSpisPogruzh->selectRow(0);
    }
    else
    {
        ui->frame->setVisible(true);
    }

}

//-------------------------------------------------------------------------------------------------
void MainWindow::SelectActiveComponent(QModelIndex index)
{
    currentMdIndex = index;
}

//-------------------------------------------------------------------------------------------------

void MainWindow::HelpAction()
{
    qTC->showMainHelp();
}

//-------------------------------------------------------------------------------------------------

void MainWindow::FormChoiceAdd()

{
    // Если открыта 1я вкладка на табВыджете, то открываем форму добавления ТС
    if (ui->tabWidget->currentIndex() == 0)
    {
        NewTS nts;
        nts.exec();
    }

    // Если открыта 2я вкладка на табВыджете, то открываем форму добавления погружения
    if (ui->tabWidget->currentIndex() == 1)
    {
        p_sgapredForm adw;
        adw.exec();

        // Надо бы обновить список погружений после этой формы
        // и поставить курсор на вновь добавленную запись
        // Фишка в том, что в обычной несортированной модели новая запись добавляется в конец модели как последняя
        ModelSpisPogruzh->setQuery(ModelSpisPogruzh->query().lastQuery(), getDbName());
        ui->tblSpisPogruzh->setFocus(Qt::ActiveWindowFocusReason);
        QModelIndex Index = ModelSpisPogruzh->index(ModelSpisPogruzh->rowCount() - 1, 0, QModelIndex());
        if (Index.isValid())
           ui->tblSpisPogruzh->setCurrentIndex(ProxyModelSpisPogruzh->mapFromSource(Index));

    }
}

//-------------------------------------------------------------------------------------------------

void MainWindow::FormChoiceEdit()

{
    // Если открыта 1я вкладка на табВыджете, то открываем форму редактирования положения состояния ТС
    if (ui->tabWidget->currentIndex() == 0)
    {
        NewTS nts;
        nts.exec();
    }
    // Если открыта 2я вкладка на табВыджете, то открываем форму редактирования погружения текущего ТС
    if (ui->tabWidget->currentIndex() == 1)
    {
        p_sgapredForm adw;
        adw.exec();
    }

}

//-------------------------------------------------------------------------------------------------

void MainWindow::DeleteRecord()

{
    if (QMessageBox::question(0,tr("Удаление данных"),tr("Удалить выбранную запись?"),QMessageBox::Yes, QMessageBox::Cancel) == QMessageBox::Cancel)
        return;

    QSqlQuery DelQuery(getDbName());
    // Запомним номер текущей записи
    QModelIndex Index = ProxyModelSpisPogruzh->mapToSource(ui->tblSpisPogruzh->currentIndex());
    if (!Index.isValid())
       return;

    DelQuery.prepare("DELETE FROM ntd.otmennd WHERE numoakt=:numoakt AND dateoakt=:dateoakt");
    DelQuery.bindValue(":numoakt", ModelSpisPogruzh->record(Index.row()).value(0).toString());
    DelQuery.bindValue(":dateoakt", ModelSpisPogruzh->record(Index.row()).value(1).toDate().toString("yyyy-MM-dd"));

//    qDebug() << DelQuery.lastError();
//    qDebug() << ModelSpisPogruzh->record(Index.row()).value(0).toString();
//    qDebug() << ModelSpisPogruzh->record(Index.row()).value(1).toDate().toString("yyyy-MM-dd");

    getDbName().transaction();
    if (DelQuery.exec())
    {
        getDbName().commit();
        // номер текущей строки (выделенной)
        int CurrentRow = ui->tblSpisPogruzh->currentIndex().row();
        // Надо бы обновить список погружений после всего
        ModelSpisPogruzh->setQuery (ModelSpisPogruzh->query().lastQuery(), getDbName()); // обновить БД
        // Курсор ставим на предыдущую запись, если она не 1я
        if (ModelSpisPogruzh->rowCount()-1 < CurrentRow)
          CurrentRow--;

        // переставляем курсор на новую
        ui->tblSpisPogruzh->setFocus(Qt::ActiveWindowFocusReason);
        ui->tblSpisPogruzh->selectRow(CurrentRow);
    }
    else // если не удалилось - ругаемся
    {
        getDbName().rollback();
        QMessageBox::critical(0,tr("Удаление данных"), tr("Ошибка при удалении данных"),QMessageBox::Ok);
    }

}

//-------------------------------------------------------------------------------------------------
void MainWindow::ShortCutFindAction()
{
    // Если кнопа не чекнута - чекаем и наоборот
    actFindAction->setChecked(!actFindAction->isChecked());
    FindAction();
}

//-------------------------------------------------------------------------------------------------

void MainWindow::FindAction()
{
    Find::instance(this)->setVisible(actFindAction->isChecked());
}

//-------------------------------------------------------------------------------------------------
